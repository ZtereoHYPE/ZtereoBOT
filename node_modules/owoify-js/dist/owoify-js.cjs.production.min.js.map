{"version":3,"file":"owoify-js.cjs.production.min.js","sources":["../src/Word.ts","../src/wordMappingFunctions.ts","../src/presets.ts","../src/index.ts","../src/interleaveArrays.ts"],"sourcesContent":["function searchValueContainsReplacedWords(\r\n  searchValue: string,\r\n  replaceValue: string,\r\n  replacedWords: Set<String>\r\n): boolean {\r\n  return Array.from(replacedWords).some(\r\n    word => word.replace(searchValue, replaceValue) !== word\r\n  );\r\n}\r\n\r\nexport default class Word {\r\n  word: string;\r\n  replacedWords: Set<string>;\r\n\r\n  constructor(word: string) {\r\n    this.word = word.trim();\r\n    this.replacedWords = new Set();\r\n  }\r\n\r\n  replace(\r\n    searchValue: any,\r\n    replaceValue: any,\r\n    replaceReplacedWords: boolean = false\r\n  ): Word {\r\n    if (\r\n      !replaceReplacedWords &&\r\n      searchValueContainsReplacedWords(\r\n        searchValue,\r\n        replaceValue,\r\n        this.replacedWords\r\n      )\r\n    )\r\n      return this;\r\n    const replacingWord: string = this.word\r\n      .replace(searchValue, replaceValue)\r\n      .trim();\r\n    const matchArray: RegExpMatchArray | null = this.word.match(searchValue);\r\n    const replacedWords: string[] =\r\n      matchArray !== null\r\n        ? Array.from(matchArray).map(x => x.replace(x, replaceValue))\r\n        : [];\r\n    if (replacingWord !== this.word) {\r\n      for (const word of replacedWords) {\r\n        this.replacedWords.add(word);\r\n      }\r\n      this.word = replacingWord;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  toString() {\r\n    return this.word;\r\n  }\r\n}\r\n","import Word from './Word';\r\n\r\nconst faces: Array<string> = [\r\n  '(・`ω´・)',\r\n  ';;w;;',\r\n  'owo',\r\n  'UwU',\r\n  '>w<',\r\n  '^w^',\r\n  '(* ^ ω ^)',\r\n  '(⌒ω⌒)',\r\n  'ヽ(*・ω・)ﾉ',\r\n  '(o´∀`o)',\r\n  '(o･ω･o)',\r\n  '＼(＾▽＾)／',\r\n];\r\n\r\nexport const Map_O_To_OwO = (input: Word): Word =>\r\n  input.replace(/o/g, () => (Math.round(Math.random()) ? 'owo' : 'o'));\r\nexport const Map_Ew_To_UwU = (input: Word): Word => input.replace(/ew/g, 'uwu');\r\nexport const Map_Hey_To_Hay = (input: Word): Word =>\r\n  input.replace(/([Hh])ey/g, '$1ay');\r\nexport const Map_Dead_To_Ded = (input: Word): Word =>\r\n  input.replace(/Dead/g, 'Ded').replace(/dead/g, 'ded');\r\nexport const Map_N_Vowel_T_To_Nd = (input: Word): Word =>\r\n  input.replace(/n[aeiou]*t/g, 'nd');\r\nexport const Map_Read_To_Wead = (input: Word): Word =>\r\n  input.replace(/Read/g, 'Wead').replace(/read/g, 'wead');\r\n\r\nexport const Map_Brackets_To_StarTrails = (input: Word): Word =>\r\n  input\r\n    .replace(/[({<]/g, '｡･:*:･ﾟ★,｡･:*:･ﾟ☆')\r\n    .replace(/[)}>]/g, '☆ﾟ･:*:･｡,★ﾟ･:*:･｡');\r\nexport const Map_PeriodCommaExclamationSemicolon_To_Kaomojis = (\r\n  input: Word\r\n): Word =>\r\n  input\r\n    .replace(\r\n      /[.,](?![0-9])/g,\r\n      () => ' ' + faces[Math.floor(Math.random() * faces.length)]\r\n    )\r\n    .replace(\r\n      /[!;]+/g,\r\n      () => ' ' + faces[Math.floor(Math.random() * faces.length)]\r\n    );\r\nexport const Map_That_To_Dat = (input: Word): Word =>\r\n  input.replace(/that/g, 'dat').replace(/That/g, 'Dat');\r\nexport const Map_Th_To_F = (input: Word): Word =>\r\n  input.replace(/[Tt]h(?![Ee])/g, 'f').replace(/TH(?!E)/g, 'F');\r\nexport const Map_Le_To_Wal = (input: Word): Word =>\r\n  input.replace(/le$/g, 'wal');\r\nexport const Map_Ve_To_We = (input: Word): Word =>\r\n  input.replace(/ve/g, 'we').replace(/Ve/g, 'We');\r\nexport const Map_Ry_To_Wwy = (input: Word): Word => input.replace(/ry/g, 'wwy');\r\nexport const Map_ROrL_To_W = (input: Word): Word =>\r\n  input.replace(/(?:r|l)/g, 'w').replace(/(?:R|L)/g, 'W');\r\n\r\nexport const Map_Ll_To_Ww = (input: Word): Word => input.replace(/ll/g, 'ww');\r\nexport const Map_VowelOrRExceptO_L_To_Wl = (input: Word): Word =>\r\n  input.replace(/[aeiur]l$/g, 'wl').replace(/[AEIUR]([lL])$/g, 'W$1');\r\nexport const Map_Old_To_Owld = (input: Word): Word =>\r\n  input.replace(/([Oo])ld/g, '$1wld').replace(/OLD/g, 'OWLD');\r\nexport const Map_Ol_To_Owl = (input: Word): Word =>\r\n  input.replace(/([Oo])l/g, '$1wl').replace(/OL/g, 'OWL');\r\nexport const Map_LOrR_O_To_Wo = (input: Word): Word =>\r\n  input.replace(/[lr]o/g, 'wo').replace(/[LR]([oO])/g, 'W$1');\r\nexport const Map_SpecificConsonants_O_To_Letter_And_Wo = (input: Word): Word =>\r\n  input\r\n    .replace(/([bcdfghjkmnpqstxyz])o/g, '$1wo')\r\n    .replace(\r\n      /([BCDFGHJKMNPQSTXYZ])([oO])/g,\r\n      (_: any, m1: string, m2: string) =>\r\n        m1 + (m2.toUpperCase() === m2 ? 'W' : 'w') + m2\r\n    );\r\nexport const Map_VOrW_Le_To_Wal = (input: Word): Word =>\r\n  input.replace(/[vw]le/g, 'wal');\r\nexport const Map_Fi_To_Fwi = (input: Word): Word =>\r\n  input.replace(/([Ff])i/g, '$1wi').replace(/FI/g, 'FWI');\r\nexport const Map_Ver_To_Wer = (input: Word): Word =>\r\n  input.replace(/([Vv])er/g, 'wer');\r\nexport const Map_Poi_To_Pwoi = (input: Word): Word =>\r\n  input.replace(/([Pp])oi/g, '$1woi');\r\nexport const Map_SpecificConsonants_Le_To_Letter_And_Wal = (\r\n  input: Word\r\n): Word => input.replace(/([DdFfGgHhJjPpQqRrSsTtXxYyZz])le$/g, '$1wal');\r\nexport const Map_Consonant_R_To_Consonant_W = (input: Word): Word =>\r\n  input.replace(/([BbCcDdFfGgKkPpQqSsTtWwXxZz])r/g, '$1w');\r\nexport const Map_Ly_To_Wy = (input: Word): Word =>\r\n  input.replace(/ly/g, 'wy').replace(/Ly/g, 'Wy');\r\nexport const Map_Ple_To_Pwe = (input: Word): Word =>\r\n  input.replace(/([Pp])le/g, '$1we');\r\nexport const Map_Nr_To_Nw = (input: Word): Word =>\r\n  input.replace(/nr/g, 'nw').replace(/NR/g, 'NW');\r\n\r\nexport const Map_Fuc_To_Fwuc = (input: Word): Word =>\r\n  input.replace(/([Ff])uc/g, '$1wuc');\r\nexport const Map_Mom_To_Mwom = (input: Word): Word =>\r\n  input.replace(/([Mm])om/g, '$1wom');\r\nexport const Map_Me_To_Mwe = (input: Word): Word =>\r\n  input.replace(/([Mm])e/g, '$1we');\r\nexport const Map_NVowel_To_Ny = (input: Word): Word =>\r\n  input\r\n    .replace(/n([aeiou])/g, 'ny$1')\r\n    .replace(/N([aeiou])/g, 'Ny$1')\r\n    .replace(/N([AEIOU])/g, 'NY$1');\r\nexport const Map_Ove_To_Uv = (input: Word): Word =>\r\n  input.replace(/ove/g, 'uv').replace(/OVE/g, 'UV');\r\nexport const Map_Haha_To_HehexD = (input: Word): Word =>\r\n  input.replace(/\\b(ha|hah|heh|hehe)+\\b/g, 'hehe xD');\r\nexport const Map_The_To_Teh = (input: Word): Word =>\r\n  input.replace(/\\b([Tt])he\\b/g, '$1eh');\r\nexport const Map_You_To_U = (input: Word): Word =>\r\n  input.replace(/\\bYou\\b/g, 'U').replace(/\\byou\\b/g, 'u');\r\nexport const Map_Time_To_Tim = (input: Word): Word =>\r\n  input.replace(/\\b([Tt])ime\\b/g, '$1im');\r\nexport const Map_Over_To_Owor = (input: Word): Word =>\r\n  input.replace(/([Oo])ver/g, '$1wor');\r\nexport const Map_Worse_To_Wose = (input: Word): Word =>\r\n  input.replace(/([Ww])orse/g, '$1ose');\r\n","import * as f from './wordMappingFunctions';\r\nimport Word from './Word';\r\n\r\nexport const specificWordMappingArray: Array<(str: Word) => Word> = [\r\n  f.Map_Fuc_To_Fwuc,\r\n  f.Map_Mom_To_Mwom,\r\n  f.Map_Time_To_Tim,\r\n  f.Map_Me_To_Mwe,\r\n  f.Map_NVowel_To_Ny,\r\n  f.Map_Over_To_Owor,\r\n  f.Map_Ove_To_Uv,\r\n  f.Map_Haha_To_HehexD,\r\n  f.Map_The_To_Teh,\r\n  f.Map_You_To_U,\r\n  f.Map_Read_To_Wead,\r\n  f.Map_Worse_To_Wose,\r\n];\r\nexport const uvuMappingArray: Array<(str: Word) => Word> = [\r\n  f.Map_O_To_OwO,\r\n  f.Map_Ew_To_UwU,\r\n  f.Map_Hey_To_Hay,\r\n  f.Map_Dead_To_Ded,\r\n  f.Map_N_Vowel_T_To_Nd,\r\n];\r\nexport const uwuMappingArray: Array<(str: Word) => Word> = [\r\n  f.Map_Brackets_To_StarTrails,\r\n  f.Map_PeriodCommaExclamationSemicolon_To_Kaomojis,\r\n  f.Map_That_To_Dat,\r\n  f.Map_Th_To_F,\r\n  f.Map_Le_To_Wal,\r\n  f.Map_Ve_To_We,\r\n  f.Map_Ry_To_Wwy,\r\n  f.Map_ROrL_To_W,\r\n];\r\nexport const owoMappingArray: Array<(str: Word) => Word> = [\r\n  f.Map_Ll_To_Ww,\r\n  f.Map_VowelOrRExceptO_L_To_Wl,\r\n  f.Map_Old_To_Owld,\r\n  f.Map_Ol_To_Owl,\r\n  f.Map_LOrR_O_To_Wo,\r\n  f.Map_SpecificConsonants_O_To_Letter_And_Wo,\r\n  f.Map_VOrW_Le_To_Wal,\r\n  f.Map_Fi_To_Fwi,\r\n  f.Map_Ver_To_Wer,\r\n  f.Map_Poi_To_Pwoi,\r\n  f.Map_SpecificConsonants_Le_To_Letter_And_Wal,\r\n  f.Map_Consonant_R_To_Consonant_W,\r\n  f.Map_Ly_To_Wy,\r\n  f.Map_Ple_To_Pwe,\r\n  f.Map_Nr_To_Nw,\r\n];\r\n","import Word from './Word';\r\nimport interleaveArrays from './interleaveArrays';\r\nimport {\r\n  uwuMappingArray,\r\n  owoMappingArray,\r\n  uvuMappingArray,\r\n  specificWordMappingArray,\r\n} from './presets';\r\n\r\nexport default function owoify(v: string, level: string = 'owo') {\r\n  let whitespace: string[] = v.split(/[^\\s]+/g);\r\n  let words: Word[] = v.split(/\\s+/g).map(x => new Word(x));\r\n  words = words.map(x => {\r\n    x = specificWordMappingArray.reduce((word, f) => f(word), x);\r\n    switch (level) {\r\n      case 'uvu':\r\n        x = uvuMappingArray.reduce((word, f) => f(word), x);\r\n      case 'uwu':\r\n        x = uwuMappingArray.reduce((word, f) => f(word), x);\r\n      case 'owo':\r\n        x = owoMappingArray.reduce((word, f) => f(word), x);\r\n      default:\r\n        break;\r\n    }\r\n    return x;\r\n  });\r\n  return interleaveArrays(whitespace, words).join('');\r\n}\r\n","export default function interleaveArrays(a: any[], b: any[]): any[] {\r\n  let arr: any[] = [];\r\n  let observed = a;\r\n  let other = b;\r\n  let temp: null | any[] = null;\r\n  while (observed.length > 0) {\r\n    arr.push(observed.shift());\r\n    temp = observed;\r\n    observed = other;\r\n    other = temp;\r\n  }\r\n  if (other.length > 0) arr.push(...other);\r\n  return arr;\r\n}\r\n"],"names":["Word","word","trim","replacedWords","Set","replace","searchValue","replaceValue","replaceReplacedWords","Array","from","some","searchValueContainsReplacedWords","this","replacingWord","matchArray","match","map","x","add","toString","faces","specificWordMappingArray","input","uvuMappingArray","Math","round","random","uwuMappingArray","floor","length","owoMappingArray","_","m1","m2","toUpperCase","v","level","whitespace","split","words","a","b","arr","observed","other","temp","push","shift","interleaveArrays","reduce","f","join"],"mappings":"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"}