{"version":3,"file":"owoify-js.umd.development.js","sources":["../src/Word.ts","../src/interleaveArrays.ts","../src/wordMappingFunctions.ts","../src/presets.ts","../src/index.ts"],"sourcesContent":["function searchValueContainsReplacedWords(\r\n  searchValue: string,\r\n  replaceValue: string,\r\n  replacedWords: Set<String>\r\n): boolean {\r\n  return Array.from(replacedWords).some(\r\n    word => word.replace(searchValue, replaceValue) !== word\r\n  );\r\n}\r\n\r\nexport default class Word {\r\n  word: string;\r\n  replacedWords: Set<string>;\r\n\r\n  constructor(word: string) {\r\n    this.word = word.trim();\r\n    this.replacedWords = new Set();\r\n  }\r\n\r\n  replace(\r\n    searchValue: any,\r\n    replaceValue: any,\r\n    replaceReplacedWords: boolean = false\r\n  ): Word {\r\n    if (\r\n      !replaceReplacedWords &&\r\n      searchValueContainsReplacedWords(\r\n        searchValue,\r\n        replaceValue,\r\n        this.replacedWords\r\n      )\r\n    )\r\n      return this;\r\n    const replacingWord: string = this.word\r\n      .replace(searchValue, replaceValue)\r\n      .trim();\r\n    const matchArray: RegExpMatchArray | null = this.word.match(searchValue);\r\n    const replacedWords: string[] =\r\n      matchArray !== null\r\n        ? Array.from(matchArray).map(x => x.replace(x, replaceValue))\r\n        : [];\r\n    if (replacingWord !== this.word) {\r\n      for (const word of replacedWords) {\r\n        this.replacedWords.add(word);\r\n      }\r\n      this.word = replacingWord;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  toString() {\r\n    return this.word;\r\n  }\r\n}\r\n","export default function interleaveArrays(a: any[], b: any[]): any[] {\r\n  let arr: any[] = [];\r\n  let observed = a;\r\n  let other = b;\r\n  let temp: null | any[] = null;\r\n  while (observed.length > 0) {\r\n    arr.push(observed.shift());\r\n    temp = observed;\r\n    observed = other;\r\n    other = temp;\r\n  }\r\n  if (other.length > 0) arr.push(...other);\r\n  return arr;\r\n}\r\n","import Word from './Word';\r\n\r\nconst faces: Array<string> = [\r\n  '(・`ω´・)',\r\n  ';;w;;',\r\n  'owo',\r\n  'UwU',\r\n  '>w<',\r\n  '^w^',\r\n  '(* ^ ω ^)',\r\n  '(⌒ω⌒)',\r\n  'ヽ(*・ω・)ﾉ',\r\n  '(o´∀`o)',\r\n  '(o･ω･o)',\r\n  '＼(＾▽＾)／',\r\n];\r\n\r\nexport const Map_O_To_OwO = (input: Word): Word =>\r\n  input.replace(/o/g, () => (Math.round(Math.random()) ? 'owo' : 'o'));\r\nexport const Map_Ew_To_UwU = (input: Word): Word => input.replace(/ew/g, 'uwu');\r\nexport const Map_Hey_To_Hay = (input: Word): Word =>\r\n  input.replace(/([Hh])ey/g, '$1ay');\r\nexport const Map_Dead_To_Ded = (input: Word): Word =>\r\n  input.replace(/Dead/g, 'Ded').replace(/dead/g, 'ded');\r\nexport const Map_N_Vowel_T_To_Nd = (input: Word): Word =>\r\n  input.replace(/n[aeiou]*t/g, 'nd');\r\nexport const Map_Read_To_Wead = (input: Word): Word =>\r\n  input.replace(/Read/g, 'Wead').replace(/read/g, 'wead');\r\n\r\nexport const Map_Brackets_To_StarTrails = (input: Word): Word =>\r\n  input\r\n    .replace(/[({<]/g, '｡･:*:･ﾟ★,｡･:*:･ﾟ☆')\r\n    .replace(/[)}>]/g, '☆ﾟ･:*:･｡,★ﾟ･:*:･｡');\r\nexport const Map_PeriodCommaExclamationSemicolon_To_Kaomojis = (\r\n  input: Word\r\n): Word =>\r\n  input\r\n    .replace(\r\n      /[.,](?![0-9])/g,\r\n      () => ' ' + faces[Math.floor(Math.random() * faces.length)]\r\n    )\r\n    .replace(\r\n      /[!;]+/g,\r\n      () => ' ' + faces[Math.floor(Math.random() * faces.length)]\r\n    );\r\nexport const Map_That_To_Dat = (input: Word): Word =>\r\n  input.replace(/that/g, 'dat').replace(/That/g, 'Dat');\r\nexport const Map_Th_To_F = (input: Word): Word =>\r\n  input.replace(/[Tt]h(?![Ee])/g, 'f').replace(/TH(?!E)/g, 'F');\r\nexport const Map_Le_To_Wal = (input: Word): Word =>\r\n  input.replace(/le$/g, 'wal');\r\nexport const Map_Ve_To_We = (input: Word): Word =>\r\n  input.replace(/ve/g, 'we').replace(/Ve/g, 'We');\r\nexport const Map_Ry_To_Wwy = (input: Word): Word => input.replace(/ry/g, 'wwy');\r\nexport const Map_ROrL_To_W = (input: Word): Word =>\r\n  input.replace(/(?:r|l)/g, 'w').replace(/(?:R|L)/g, 'W');\r\n\r\nexport const Map_Ll_To_Ww = (input: Word): Word => input.replace(/ll/g, 'ww');\r\nexport const Map_VowelOrRExceptO_L_To_Wl = (input: Word): Word =>\r\n  input.replace(/[aeiur]l$/g, 'wl').replace(/[AEIUR]([lL])$/g, 'W$1');\r\nexport const Map_Old_To_Owld = (input: Word): Word =>\r\n  input.replace(/([Oo])ld/g, '$1wld').replace(/OLD/g, 'OWLD');\r\nexport const Map_Ol_To_Owl = (input: Word): Word =>\r\n  input.replace(/([Oo])l/g, '$1wl').replace(/OL/g, 'OWL');\r\nexport const Map_LOrR_O_To_Wo = (input: Word): Word =>\r\n  input.replace(/[lr]o/g, 'wo').replace(/[LR]([oO])/g, 'W$1');\r\nexport const Map_SpecificConsonants_O_To_Letter_And_Wo = (input: Word): Word =>\r\n  input\r\n    .replace(/([bcdfghjkmnpqstxyz])o/g, '$1wo')\r\n    .replace(\r\n      /([BCDFGHJKMNPQSTXYZ])([oO])/g,\r\n      (_: any, m1: string, m2: string) =>\r\n        m1 + (m2.toUpperCase() === m2 ? 'W' : 'w') + m2\r\n    );\r\nexport const Map_VOrW_Le_To_Wal = (input: Word): Word =>\r\n  input.replace(/[vw]le/g, 'wal');\r\nexport const Map_Fi_To_Fwi = (input: Word): Word =>\r\n  input.replace(/([Ff])i/g, '$1wi').replace(/FI/g, 'FWI');\r\nexport const Map_Ver_To_Wer = (input: Word): Word =>\r\n  input.replace(/([Vv])er/g, 'wer');\r\nexport const Map_Poi_To_Pwoi = (input: Word): Word =>\r\n  input.replace(/([Pp])oi/g, '$1woi');\r\nexport const Map_SpecificConsonants_Le_To_Letter_And_Wal = (\r\n  input: Word\r\n): Word => input.replace(/([DdFfGgHhJjPpQqRrSsTtXxYyZz])le$/g, '$1wal');\r\nexport const Map_Consonant_R_To_Consonant_W = (input: Word): Word =>\r\n  input.replace(/([BbCcDdFfGgKkPpQqSsTtWwXxZz])r/g, '$1w');\r\nexport const Map_Ly_To_Wy = (input: Word): Word =>\r\n  input.replace(/ly/g, 'wy').replace(/Ly/g, 'Wy');\r\nexport const Map_Ple_To_Pwe = (input: Word): Word =>\r\n  input.replace(/([Pp])le/g, '$1we');\r\nexport const Map_Nr_To_Nw = (input: Word): Word =>\r\n  input.replace(/nr/g, 'nw').replace(/NR/g, 'NW');\r\n\r\nexport const Map_Fuc_To_Fwuc = (input: Word): Word =>\r\n  input.replace(/([Ff])uc/g, '$1wuc');\r\nexport const Map_Mom_To_Mwom = (input: Word): Word =>\r\n  input.replace(/([Mm])om/g, '$1wom');\r\nexport const Map_Me_To_Mwe = (input: Word): Word =>\r\n  input.replace(/([Mm])e/g, '$1we');\r\nexport const Map_NVowel_To_Ny = (input: Word): Word =>\r\n  input\r\n    .replace(/n([aeiou])/g, 'ny$1')\r\n    .replace(/N([aeiou])/g, 'Ny$1')\r\n    .replace(/N([AEIOU])/g, 'NY$1');\r\nexport const Map_Ove_To_Uv = (input: Word): Word =>\r\n  input.replace(/ove/g, 'uv').replace(/OVE/g, 'UV');\r\nexport const Map_Haha_To_HehexD = (input: Word): Word =>\r\n  input.replace(/\\b(ha|hah|heh|hehe)+\\b/g, 'hehe xD');\r\nexport const Map_The_To_Teh = (input: Word): Word =>\r\n  input.replace(/\\b([Tt])he\\b/g, '$1eh');\r\nexport const Map_You_To_U = (input: Word): Word =>\r\n  input.replace(/\\bYou\\b/g, 'U').replace(/\\byou\\b/g, 'u');\r\nexport const Map_Time_To_Tim = (input: Word): Word =>\r\n  input.replace(/\\b([Tt])ime\\b/g, '$1im');\r\nexport const Map_Over_To_Owor = (input: Word): Word =>\r\n  input.replace(/([Oo])ver/g, '$1wor');\r\nexport const Map_Worse_To_Wose = (input: Word): Word =>\r\n  input.replace(/([Ww])orse/g, '$1ose');\r\n","import * as f from './wordMappingFunctions';\r\nimport Word from './Word';\r\n\r\nexport const specificWordMappingArray: Array<(str: Word) => Word> = [\r\n  f.Map_Fuc_To_Fwuc,\r\n  f.Map_Mom_To_Mwom,\r\n  f.Map_Time_To_Tim,\r\n  f.Map_Me_To_Mwe,\r\n  f.Map_NVowel_To_Ny,\r\n  f.Map_Over_To_Owor,\r\n  f.Map_Ove_To_Uv,\r\n  f.Map_Haha_To_HehexD,\r\n  f.Map_The_To_Teh,\r\n  f.Map_You_To_U,\r\n  f.Map_Read_To_Wead,\r\n  f.Map_Worse_To_Wose,\r\n];\r\nexport const uvuMappingArray: Array<(str: Word) => Word> = [\r\n  f.Map_O_To_OwO,\r\n  f.Map_Ew_To_UwU,\r\n  f.Map_Hey_To_Hay,\r\n  f.Map_Dead_To_Ded,\r\n  f.Map_N_Vowel_T_To_Nd,\r\n];\r\nexport const uwuMappingArray: Array<(str: Word) => Word> = [\r\n  f.Map_Brackets_To_StarTrails,\r\n  f.Map_PeriodCommaExclamationSemicolon_To_Kaomojis,\r\n  f.Map_That_To_Dat,\r\n  f.Map_Th_To_F,\r\n  f.Map_Le_To_Wal,\r\n  f.Map_Ve_To_We,\r\n  f.Map_Ry_To_Wwy,\r\n  f.Map_ROrL_To_W,\r\n];\r\nexport const owoMappingArray: Array<(str: Word) => Word> = [\r\n  f.Map_Ll_To_Ww,\r\n  f.Map_VowelOrRExceptO_L_To_Wl,\r\n  f.Map_Old_To_Owld,\r\n  f.Map_Ol_To_Owl,\r\n  f.Map_LOrR_O_To_Wo,\r\n  f.Map_SpecificConsonants_O_To_Letter_And_Wo,\r\n  f.Map_VOrW_Le_To_Wal,\r\n  f.Map_Fi_To_Fwi,\r\n  f.Map_Ver_To_Wer,\r\n  f.Map_Poi_To_Pwoi,\r\n  f.Map_SpecificConsonants_Le_To_Letter_And_Wal,\r\n  f.Map_Consonant_R_To_Consonant_W,\r\n  f.Map_Ly_To_Wy,\r\n  f.Map_Ple_To_Pwe,\r\n  f.Map_Nr_To_Nw,\r\n];\r\n","import Word from './Word';\r\nimport interleaveArrays from './interleaveArrays';\r\nimport {\r\n  uwuMappingArray,\r\n  owoMappingArray,\r\n  uvuMappingArray,\r\n  specificWordMappingArray,\r\n} from './presets';\r\n\r\nexport default function owoify(v: string, level: string = 'owo') {\r\n  let whitespace: string[] = v.split(/[^\\s]+/g);\r\n  let words: Word[] = v.split(/\\s+/g).map(x => new Word(x));\r\n  words = words.map(x => {\r\n    x = specificWordMappingArray.reduce((word, f) => f(word), x);\r\n    switch (level) {\r\n      case 'uvu':\r\n        x = uvuMappingArray.reduce((word, f) => f(word), x);\r\n      case 'uwu':\r\n        x = uwuMappingArray.reduce((word, f) => f(word), x);\r\n      case 'owo':\r\n        x = owoMappingArray.reduce((word, f) => f(word), x);\r\n      default:\r\n        break;\r\n    }\r\n    return x;\r\n  });\r\n  return interleaveArrays(whitespace, words).join('');\r\n}\r\n"],"names":["searchValueContainsReplacedWords","searchValue","replaceValue","replacedWords","Array","from","some","word","replace","Word","trim","Set","replaceReplacedWords","replacingWord","matchArray","match","map","x","add","toString","interleaveArrays","a","b","arr","observed","other","temp","length","push","shift","faces","Map_O_To_OwO","input","Math","round","random","Map_Ew_To_UwU","Map_Hey_To_Hay","Map_Dead_To_Ded","Map_N_Vowel_T_To_Nd","Map_Read_To_Wead","Map_Brackets_To_StarTrails","Map_PeriodCommaExclamationSemicolon_To_Kaomojis","floor","Map_That_To_Dat","Map_Th_To_F","Map_Le_To_Wal","Map_Ve_To_We","Map_Ry_To_Wwy","Map_ROrL_To_W","Map_Ll_To_Ww","Map_VowelOrRExceptO_L_To_Wl","Map_Old_To_Owld","Map_Ol_To_Owl","Map_LOrR_O_To_Wo","Map_SpecificConsonants_O_To_Letter_And_Wo","_","m1","m2","toUpperCase","Map_VOrW_Le_To_Wal","Map_Fi_To_Fwi","Map_Ver_To_Wer","Map_Poi_To_Pwoi","Map_SpecificConsonants_Le_To_Letter_And_Wal","Map_Consonant_R_To_Consonant_W","Map_Ly_To_Wy","Map_Ple_To_Pwe","Map_Nr_To_Nw","Map_Fuc_To_Fwuc","Map_Mom_To_Mwom","Map_Me_To_Mwe","Map_NVowel_To_Ny","Map_Ove_To_Uv","Map_Haha_To_HehexD","Map_The_To_Teh","Map_You_To_U","Map_Time_To_Tim","Map_Over_To_Owor","Map_Worse_To_Wose","specificWordMappingArray","f","uvuMappingArray","uwuMappingArray","owoMappingArray","owoify","v","level","whitespace","split","words","reduce","join"],"mappings":"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"}